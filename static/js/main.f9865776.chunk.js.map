{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","visibleTodos","props","todos","handleInputChange","event","setState","target","value","handleSelectChange","filter","todo","completed","filterTitle","toLowerCase","includes","prevProps","this","searchedTodos","className","type","placeholder","onChange","map","checked","readOnly","userId","selectedUserId","onClick","selectUser","id","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","getUser","CurrentUser","user","loadUserFromServer","a","name","email","phone","clearUser","App","errorMessage","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9865776.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  selectedUserId: number,\n};\n\ntype State = {\n  title: string,\n  visibleTodos: Todo[],\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    title: '',\n    visibleTodos: this.props.todos,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.todos !== this.props.todos) {\n      this.state.visibleTodos = this.props.todos;\n    }\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      title: event.target.value,\n    });\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    switch (value) {\n      case ('active'):\n        this.setState(({\n          visibleTodos: this.props.todos.filter(todo => !todo.completed),\n        }));\n        break;\n      case ('completed'):\n        this.setState(({\n          visibleTodos: this.props.todos.filter(todo => todo.completed),\n        }));\n        break;\n      default:\n        this.setState({ visibleTodos: this.props.todos });\n        break;\n    }\n  };\n\n  filterTitle = () => {\n    return (\n      this.state.visibleTodos.filter(todo => (\n        todo.title.toLowerCase().includes(this.state.title.toLowerCase())\n      ))\n    );\n  };\n\n  render() {\n    const searchedTodos = this.filterTitle();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__filter\">\n          Filter Todos By Title:\n          <input\n            className=\"TodoList__filter-search\"\n            type=\"text\"\n            placeholder=\"enter title to search\"\n            value={this.state.title}\n            onChange={this.handleInputChange}\n          />\n\n          <select onChange={this.handleSelectChange}>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {searchedTodos.map(todo => (\n              <li\n                className={todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'}\n                key={todo.id}\n              >\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n                <button\n                  className={todo.userId === this.props.selectedUserId\n                    ? 'TodoList__user-button--selected button'\n                    : 'TodoList__user-button button'}\n                  type=\"button\"\n                  onClick={() => this.props.selectUser(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import { User } from './react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../react-app-env';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadUserFromServer();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserFromServer();\n    }\n  }\n\n  loadUserFromServer = async () => {\n    try {\n      const user = await getUser(this.props.userId);\n\n      this.setState({ user });\n    } catch (error) {\n      this.setState({ user: null });\n    }\n  };\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <>\n          <p>Loading User...</p>\n        </>\n      );\n    }\n\n    return (\n      <>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n        )}\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './react-app-env';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[],\n  errorMessage: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    errorMessage: '',\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch {\n      this.setState({ errorMessage: 'List is not found' });\n    }\n  }\n\n  selectUser = (userId: number) => {\n    if (this.state.selectedUserId === userId) {\n      return;\n    }\n\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0\n            ? (\n              <TodoList\n                todos={todos}\n                selectUser={this.selectUser}\n                selectedUserId={selectedUserId}\n              />\n            )\n            : <p>{errorMessage}</p>}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}